// Prisma Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique @db.VarChar(32)
  email     String?   @unique @db.VarChar(191)
  fName     String    @db.VarChar(96)
  lName     String?   @db.VarChar(96)
  password  String    @db.VarChar(255)
  avatarUrl String?   @db.VarChar(255)
  meta      Json?     @db.Json
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @updatedAt @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)
  Content   Content[]
  Account   Account[]
  Session   Session[]
}

model Content {
  id         Int                  @id @default(autoincrement())
  title      String               @db.VarChar(255)
  slug       String               @unique @db.VarChar(191)
  type       String               @db.VarChar(32) // Article, Video, Podcast, etc
  cat        String?              @db.VarChar(32) // Future/custom
  subCat     String?              @db.VarChar(32) // Future/custom
  content    Json?                @db.Json
  author     User?                @relation(fields: [authorId], references: [id])
  authorId   Int?
  stage      String               @db.VarChar(32)
  visibility String               @db.VarChar(32)
  meta       Json?                @db.Json
  createdAt  DateTime             @default(now()) @db.DateTime(0)
  updatedAt  DateTime             @updatedAt @db.DateTime(0)
  deletedAt  DateTime?            @db.DateTime(0)
  categories ContentCategoryMap[]
  tags       ContentTagMap[]
}

model Tag {
  id        Int             @id @default(autoincrement())
  name      String          @unique @db.VarChar(64)
  slug      String          @unique @db.VarChar(72)
  meta      Json?           @db.Json
  createdAt DateTime        @default(now()) @db.DateTime(0)
  updatedAt DateTime        @updatedAt @db.DateTime(0)
  deletedAt DateTime?       @db.DateTime(0)
  contents  ContentTagMap[]
}

model Category {
  id        Int                  @id @default(autoincrement())
  name      String               @unique @db.VarChar(64)
  slug      String               @unique @db.VarChar(72)
  meta      Json?                @db.Json
  createdAt DateTime             @default(now()) @db.DateTime(0)
  updatedAt DateTime             @updatedAt @db.DateTime(0)
  deletedAt DateTime?            @db.DateTime(0)
  contents  ContentCategoryMap[]
}

model ContentTagMap {
  id        Int       @id @default(autoincrement())
  content   Content   @relation(fields: [contentId], references: [id])
  contentId Int
  tag       Tag       @relation(fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @updatedAt @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)

  @@map("_map_content_tag")
}

model ContentCategoryMap {
  id         Int       @id @default(autoincrement())
  content    Content   @relation(fields: [contentId], references: [id])
  contentId  Int
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
  createdAt  DateTime  @default(now()) @db.DateTime(0)
  updatedAt  DateTime  @updatedAt @db.DateTime(0)
  deletedAt  DateTime? @db.DateTime(0)

  @@map("_map_content_category")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
